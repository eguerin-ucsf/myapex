

========================================
IIC. Configuration: Derive From Entry for OpenLDAP (Not nested)
========================================


Attribute holding the previous list of values (What is previous list?)
-- authorization.deriveFromEnryEntryAttribute = dn

Attribute holding drupal roles members (What attribute contains members?)
-- authorization.deriveFromEntryMembershipAttr = member

User LDAP Entry attribute held in "Attribute holding drupal roles members" 
-- authorization.deriveFromEntryAttrMatchingUserAttr=dn

server.groupObjectClass = 'groupofnames'


========================================
Walk Through: IIC. Derive From Entry for OpenLDAP Not Nested
========================================

user ldap entry in question:
  'dn' => 'cn=joeprogrammer,ou=it,dc=ad,dc=myuniversity,dc=edu',
  'mail' => array( 0 => 'joeprogrammer@myuniversity.edu'),
  
LDAP Entries:

'dn' => 'cn=chess players,cn=groups,dc=ad,dc=myuniversity,dc=edu',
'objectclass' => array( 0 => 'groupofnames'),
'member' => array(
  0 => 'cn=joeprogrammer,ou=it,dc=ad,dc=myuniversity,dc=edu',
  1 => 'cn=speed chess players,ou=groups,dc=ad,dc=myuniversity,dc=edu',
),

'dn' => 'cn=it,cn=groups,dc=ad,dc=myuniversity,dc=edu',
'objectclass' => array( 0 => 'groupofnames'),
'member' => array(
  0 => 'cn=developers,cn=groups,dc=ad,dc=myuniversity,dc=edu',
  1 => 'cn=sysadmins,cn=groups,dc=ad,dc=myuniversity,dc=edu',
  2 => 'cn=joeprogrammer,ou=it,dc=ad,dc=myuniversity,dc=edu',
),

'dn' => 'cn=staff,cn=groups,dc=ad,dc=myuniversity,dc=edu',
'objectclass' => array( 0 => 'groupofnames'),
'member' => array(
   0 => 'cn=it,cn=groups,dc=ad,dc=myuniversity,dc=edu',
   1 => 'cn=hr,cn=groups,dc=ad,dc=myuniversity,dc=edu',
   2 => 'cn=other,cn=groups,dc=ad,dc=myuniversity,dc=edu',
),

'dn' => 'cn=people,cn=groups,dc=ad,dc=myuniversity,dc=edu',
'objectclass' => array( 0 => 'groupofnames'),
'member' => array(
   0 => 'cn=students,cn=groups,dc=ad,dc=myuniversity,dc=edu',
   1 => 'cn=staff,cn=groups,dc=ad,dc=myuniversity,dc=edu',
),
  


1). foreach base dn, execute the following query:

(&
(objectClass=groupofnames)
(member=cn=joeprogrammer,ou=it,dc=ad,dc=myuniversity,dc=edu)
)

in psuedo code:
(&
(objectClass=[server.groupObjectClass])
([authorization.deriveFromEntryMembershipAttr]=[user_ldap_entry[dn]])
)


This will return the entries:

'dn' => 'cn=it,cn=groups,dc=ad,dc=myuniversity,dc=edu',
'objectclass' => array( 0 => 'groupofnames'),
'member' => array(
  0 => 'cn=developers,cn=groups,dc=ad,dc=myuniversity,dc=edu',
  1 => 'cn=sysadmins,cn=groups,dc=ad,dc=myuniversity,dc=edu',
  2 => 'cn=joeprogrammer,ou=it,dc=ad,dc=myuniversity,dc=edu',
),

'dn' => 'cn=chess players,cn=groups,dc=ad,dc=myuniversity,dc=edu',
'objectclass' => array( 0 => 'groupofnames'),
'member' => array(
  0 => 'cn=joeprogrammer,ou=it,dc=ad,dc=myuniversity,dc=edu',
  0 => 'cn=speed chess players,ou=groups,dc=ad,dc=myuniversity,dc=edu',
),



2. All group entries returned represent groups that user is a member of.
Add all these group DNs to the list of group DNs user is a member of
(cn=it,cn=groups,dc=ad,dc=myuniversity,dc=edu and cn=chess players,cn=groups,dc=ad,dc=myuniversity,dc=edu)

3. Proceed to filtering and mapping.